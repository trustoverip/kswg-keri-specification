name: Set GitHub Pages and Homepage

on:
  workflow_dispatch:

jobs:
  configure-pages-and-homepage:
    runs-on: ubuntu-latest
    permissions:
      contents: read  # To check branches
      pages: write   # To configure Pages settings
    steps:
      - name: Check if gh-pages branch exists
        id: check-branch
        run: |
          RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" \
            -H "Authorization: token ${{ secrets.MY_PAT }}" \
            -H "Accept: application/vnd.github+json" \
            https://api.github.com/repos/${{ github.repository }}/branches/gh-pages)
          if [ "$RESPONSE" -eq 200 ]; then
            echo "gh-pages branch exists"
            echo "BRANCH_EXISTS=true" >> $GITHUB_ENV
          elif [ "$RESPONSE" -eq 404 ]; then
            echo "Error: gh-pages branch does not exist in ${{ github.repository }}"
            exit 1
          else
            echo "Unexpected response code: $RESPONSE"
            exit 1
          fi

      - name: Set GitHub Pages to gh-pages
        if: env.BRANCH_EXISTS == 'true'
        env:
          PAT: ${{ secrets.MY_PAT }}
        run: |
          RESPONSE=$(curl -s -L \
            -X POST \
            -H "Authorization: token $PAT" \
            -H "Accept: application/vnd.github+json" \
            https://api.github.com/repos/${{ github.repository }}/pages \
            -d '{"source":{"branch":"gh-pages","path":"/"}}' \
            -w "%{http_code}" -o response.json)
          if [ "$RESPONSE" -eq 201 ] || [ "$RESPONSE" -eq 200 ]; then
            echo "GitHub Pages set to gh-pages branch for ${{ github.repository }}"
          else
            echo "Failed to set GitHub Pages: $RESPONSE"
            cat response.json
            exit 1
          fi

      - name: Set repository homepage to GitHub Pages URL
        if: env.BRANCH_EXISTS == 'true'
        env:
          PAT: ${{ secrets.MY_PAT }}
        run: |
          # Construct the expected GitHub Pages URL
          REPO_NAME=$(echo "${{ github.repository }}" | cut -d'/' -f2)
          OWNER=$(echo "${{ github.repository }}" | cut -d'/' -f1)
          PAGES_URL="https://${OWNER}.github.io/${REPO_NAME}"

          # Set the homepage via API
          RESPONSE=$(curl -s -L \
            -X PATCH \
            -H "Authorization: token $PAT" \
            -H "Accept: application/vnd.github+json" \
            https://api.github.com/repos/${{ github.repository }} \
            -d "{\"homepage\":\"${PAGES_URL}\"}" \
            -w "%{http_code}" -o response.json)

          if [ "$RESPONSE" -eq 200 ]; then
            echo "Repository homepage set to $PAGES_URL for ${{ github.repository }}"
          else
            echo "Failed to set homepage: $RESPONSE"
            cat response.json
            exit 1
          fi

      - name: Verify homepage matches GitHub Pages URL
        if: env.BRANCH_EXISTS == 'true'
        env:
          PAT: ${{ secrets.MY_PAT }}
        run: |
          # Construct the expected GitHub Pages URL
          REPO_NAME=$(echo "${{ github.repository }}" | cut -d'/' -f2)
          OWNER=$(echo "${{ github.repository }}" | cut -d'/' -f1)
          EXPECTED_URL="https://${OWNER}.github.io/${REPO_NAME}"

          # Fetch the current homepage from the repo
          CURRENT_HOMEPAGE=$(curl -s -L \
            -H "Authorization: token $PAT" \
            -H "Accept: application/vnd.github+json" \
            https://api.github.com/repos/${{ github.repository }} | jq -r '.homepage')

          if [ "$CURRENT_HOMEPAGE" = "$EXPECTED_URL" ]; then
            echo "Verified: Homepage is set to GitHub Pages URL ($EXPECTED_URL)"
          else
            echo "Error: Homepage ($CURRENT_HOMEPAGE) does not match expected GitHub Pages URL ($EXPECTED_URL)"
            exit 1
          fi